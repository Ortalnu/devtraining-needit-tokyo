<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>sc</category>
        <client_script><![CDATA[function($scope) {
  /* widget controller */
  var c = this;
	c.data.expand = (c.options.onload_expand_request_item_stages == "true" );
	$scope.toggle = function($event) {
		c.data.expand = !c.data.expand;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>$sp-space--3xl: 40px !default;
.color-positive {
  color: $brand-success;
}
.color-accent {
  color: $brand-primary;
}
.color-negative {
  color: $brand-danger;
}
.requested-items-flex-container {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    flex-direction: row;
  img.toggle {
    vertical-align: baseline !important;
  }
}
/**/
.stage-on .icon, .stage-off .icon{ margin-right:6px; }
.stage-on, .stage-off { margin-bottom: 6px; }

.l-h-40 {
  line-height: $sp-space--3xl;
}
.list-action {
  display:block;
  padding:0 6px;
  cursor: pointer;
}
.list-action:hover {
  background-color: #fff;
}

button.flex-item {
  padding:0;
  background-color: inherit;
  height: 20px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>request_item_workflow_stages_new</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Copy of Request Item Workflow Stages</name>
        <option_schema>[{"hint":"This will show the expanded view of stages","name":"onload_expand_request_item_stages","section":"other","default_value":"false","label":"OnLoad Expand Request Item Stages","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    var req_item_id = JSUtil.nil(options.req_item_id + '') ? '' : options.req_item_id + '';
    if (!req_item_id) {
        req_item_id = JSUtil.nil(input.req_item_id + '') ? '' : input.req_item_id + '';
    }
    if (!req_item_id) {
        data.error = gs.getMessage("Request Item Not Provided");
        return;
    }
    var sc_req_item = new GlideRecord('sc_req_item');
    sc_req_item.get(req_item_id);

    if (!sc_req_item.isValidRecord()) {
        data.error = gs.getMessage("Invalid Request Item ID");
        return;
    }
	
		data.properties = {'workflow_driven_show_approvers': gs.getProperty("glide.workflow.renderer.workflowdriven.show_approver"),
										 'linear_show_approvers': gs.getProperty("glide.workflow.renderer.linear.show_approver"),
										 'main_flow_show_approvers': gs.getProperty("glide.workflow.renderer.mainflow.show_approver")
										};
	
		data.preferences = {'ui_accessibility' :
							gs.getPreference("glide.ui.accessibility", "false")};
	
    var ref = sc_req_item.stage;
		var refValue = ref.getValue();
		data.display_value = ref.getDisplayValue();
		if (sc_req_item.request.approval == 'requested') {
			data.process_started = false;
			data.display_value = gs.getMessage("Request Approval");
		} else {
			data.process_started = true;
			if (refValue == "request_approved") {
				if ((sc_req_item.context.nil() && sc_req_item.flow_context.nil()) || (!sc_req_item.flow_context.nil() && sc_req_item.flow_context.state == 'QUEUED'))
					data.display_value = gs.getMessage("Initiating");
				else if (refValue == ref.getDisplayValue())
					data.display_value = gs.getMessage("Request Approved");
			}
		}
	
    GlideController.putGlobal('sc_req_item', sc_req_item);
    sc_req_item.putCurrent();
    var renderer = RendererFactory.getRenderer(ref, sc_req_item.sys_id);
    var api = new SNC.RendererAPI(renderer);
    data.renderer = renderer + "";
    var worflow_id = sc_req_item.stage;
    var choiceList;
	var high_contrast = "";
	
	if(data.preferences.ui_accessibility == "true")
			high_contrast = "_high_contrast";
	
    if (renderer == 'Legacy' || renderer == "SCReqItemRenderer") {
				if (ref.getProviderType() == 'PFStagesProvider') {
					choiceList = ref.getStages();
				}
				else {
						var clGenerator = new GlideChoiceListGenerator('sc_req_item', 'stage');
						clGenerator.none = false;
						choiceList = clGenerator.get();
						api.internationalizeChoices(choiceList);
						var wfw;
						if (sc_req_item.stage.hasAttribute('icons') && typeof (this[sc_req_item.stage.getAttribute('icons')]) == "function")
								wfw = new this[sc_req_item.stage.getAttribute('icons')]('sc_req_item.stage');
						else
								wfw = new WorkflowIcons('sc_req_item.stage');
						choiceList = wfw.process(choiceList);
						
				}
        var list = [];
        if (!JSUtil.nil(choiceList)) {
            for (var i = 0; i < choiceList.size(); i++) {
                var choice = choiceList.get(i);
                if (!JSUtil.nil(choice.getValue())) {
                	   if (ref.getProviderType() == 'PFStagesProvider' && choice.getParameter('visible') == false)
						continue;
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.title = choice.getParameter('title') || choice.getLabel();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    if (ref.getProviderType() == 'PFStagesProvider')
												temp.displayValue = temp.title + " (" + temp.state + ")";
										else
												temp.displayValue = temp.title + " (" + temp.label + ")";
                    temp.value = choice.getValue();
                    temp.id = choice.getId();
                    temp.selected = choice.getSelected();

                    var imgsrc = choice.image.split(' ');
                    imgsrc = imgsrc.length ? imgsrc[0] : imgsrc;
                    if (!imgsrc)
                        imgsrc = temp.selected ? 'icon-check-circle' : 'icon-empty-circle';
					
					imgsrc += high_contrast;
                    temp.image = imgsrc + '.png';
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
    } else if (renderer == "Linear" || renderer == "Main flow" || renderer == "Workflow-driven") {
        if (renderer == "Linear" || renderer == "Workflow-driven")
            choiceList = api.getAllWorkflowChoices(current, 'sc_req_item.stage');
        else
            choiceList = api.getParentWorkflowChoices(current, 'sc_req_item.stage');

				var showApprovers = false;
				if (renderer == "Linear")
					showApprovers = data.properties.linear_show_approvers == "true";
				else if (renderer == "Main flow")
					showApprovers = data.properties.main_flow_show_approvers == "true";
				else if (renderer == "Workflow-driven")
					showApprovers = data.properties.workflow_driven_show_approvers == "true";
			
        api.addIconsAndStatus(choiceList);
        var list = [];
        if (!JSUtil.nil(choiceList)) {
            for (var j = 0; j < choiceList.size(); j++) {
                var choice = choiceList.get(j);
                var isVisible = true;
                if (renderer == "Linear" && !api.getOption('showSkipped'))
                    if (choice.getParameter('state') + '' == 'skipped')
                        isVisible = false;

                if (renderer == "Main flow" || renderer == "Workflow-driven") {
                    var isWorkFlow = SNC.WorkflowStageRenderer.isWorkflow('sc_req_item.stage');
                    isVisible = (isWorkFlow == 'false') || ((choice.getParameter('visible') + '') == 'true');
                }
                if (choice.value == '')
                    isVisible = false;

                if (isVisible) {
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.value = choice.getValue();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    temp.id = choice.getId();
                    temp.selected = choice.getSelected();
										if (showApprovers) {
											var approvers = choice.getParameter('approvers');
											var approverArr = [];
											for(var i=0; i<approvers.size(); i++) {
												var approver = approvers.get(i);
												approverArr.push(approver.get('label'));
											}
										}
										temp.approvers = approverArr;
                    temp.title = choice.getParameter('title') || choice.getLabel();
                    temp.displayValue = temp.title + " (" + temp.label + ")"
                    var imgsrc = choice.image.split(' ');
                    imgsrc = imgsrc.length ? imgsrc[0] : imgsrc;
                    if (!imgsrc)
                        imgsrc = temp.selected ? 'icon-check-circle' : 'icon-empty-circle';
					
					imgsrc += high_contrast;
                    temp.image = imgsrc + '.png';
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
    } else if (renderer == "SimpleProgressBar") {
        choiceList = api.getParentWorkflowChoices(current, 'sc_req_item.stage');
        var showValue = api.getOption('showValue') + '';
        var increment = 100.00 / choiceList.getSize();
        var percentComplete = 0;
        var atEnd = true;

        for (var i = 0; choiceList.getSize() > i; i++) {
            percentComplete += increment;
            if (choiceList.getChoice(i).getParameter('state') + '' === 'active') {
                atEnd = false;
                break;
            }
        }
        data.increment = increment;

        percentComplete = atEnd ? 100 : parseInt(percentComplete);
        if (!JSUtil.nil(choiceList)) {
            var list = [];
            for (var j = 0; j < choiceList.size(); j++) {
                var choice = choiceList.get(j);
                var isVisible = true;
                if (!api.getOption('showSkipped'))
                    if (choice.getParameter('state') + '' == 'skipped')
                        isVisible = false;

                if (choice.value == '')
                    isVisible = false;
                if (isVisible) {
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.value = choice.getValue();
                    temp.id = choice.getId();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    temp.selected = choice.getSelected();
                    temp.title = choice.getParameter('title') || choice.getLabel();
                    var isVisible = true;
                    temp.isVisible = isVisible;
                    temp.displayValue = temp.label;

                    var imgsrc = 'progress_pctnotdone.gifx';
                    if (choice.getParameter('state') + '' != 'pending')
                        imgsrc = 'progress_pctdone.gifx';
                    temp.image = imgsrc;
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
				data.showValue = showValue;
			data.percentComplete = percentComplete;
    }
    data.current_stage_msg = gs.getMessage("Current stage: {0}", data.display_value); //We need this for WCAG
    data.approval_stages_msg = gs.getMessage("all stages "); //also for WCAG
    GlideController.removeGlobal('sc_req_item');
    sc_req_item.popCurrent();
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-28 21:20:38</sys_created_on>
        <sys_id>3c58d7af972021106882b0efe153afcb</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>Copy of Request Item Workflow Stages</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sp_widget_3c58d7af972021106882b0efe153afcb</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-01-28 21:22:17</sys_updated_on>
        <template><![CDATA[<div ng-if="data.error">
  <h3>
    {{::data.error}}
  </h3>
</div>
<div ng-if="!data.error">
  <div ng-include="'ritm_stage_icons_bar'" ng-if="data.renderer == 'Legacy' || data.renderer == 'SCReqItemRenderer' || data.renderer == 'Linear' || data.renderer == 'Main flow' || data.renderer == 'Workflow-driven'">
  </div>
  <div ng-if="data.renderer == 'SimpleProgressBar'" ng-include="'ritm_stage_progress_bar'">
  </div>
</div>]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</application>
        <file_path/>
        <instance_id>32f05917db7d609052dd2f17d4961924</instance_id>
        <instance_name>dev105920</instance_name>
        <name>sp_widget_3c58d7af972021106882b0efe153afcb</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;sc&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function($scope) {
  /* widget controller */
  var c = this;
	c.data.expand = (c.options.onload_expand_request_item_stages == "true" );
	$scope.toggle = function($event) {
		c.data.expand = !c.data.expand;
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;$sp-space--3xl: 40px !default;
.color-positive {
  color: $brand-success;
}
.color-accent {
  color: $brand-primary;
}
.color-negative {
  color: $brand-danger;
}
.requested-items-flex-container {
    display: -webkit-flex;
    display: flex;
    -webkit-flex-direction: row;
    flex-direction: row;
  img.toggle {
    vertical-align: baseline !important;
  }
}
/**/
.stage-on .icon, .stage-off .icon{ margin-right:6px; }
.stage-on, .stage-off { margin-bottom: 6px; }

.l-h-40 {
  line-height: $sp-space--3xl;
}
.list-action {
  display:block;
  padding:0 6px;
  cursor: pointer;
}
.list-action:hover {
  background-color: #fff;
}

button.flex-item {
  padding:0;
  background-color: inherit;
  height: 20px;
}
&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;true&lt;/has_preview&gt;&lt;id&gt;request_item_workflow_stages_new&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;Copy of Request Item Workflow Stages&lt;/name&gt;&lt;option_schema&gt;[{"hint":"This will show the expanded view of stages","name":"onload_expand_request_item_stages","section":"other","default_value":"false","label":"OnLoad Expand Request Item Stages","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;false&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
    var req_item_id = JSUtil.nil(options.req_item_id + '') ? '' : options.req_item_id + '';
    if (!req_item_id) {
        req_item_id = JSUtil.nil(input.req_item_id + '') ? '' : input.req_item_id + '';
    }
    if (!req_item_id) {
        data.error = gs.getMessage("Request Item Not Provided");
        return;
    }
    var sc_req_item = new GlideRecord('sc_req_item');
    sc_req_item.get(req_item_id);

    if (!sc_req_item.isValidRecord()) {
        data.error = gs.getMessage("Invalid Request Item ID");
        return;
    }
	
		data.properties = {'workflow_driven_show_approvers': gs.getProperty("glide.workflow.renderer.workflowdriven.show_approver"),
										 'linear_show_approvers': gs.getProperty("glide.workflow.renderer.linear.show_approver"),
										 'main_flow_show_approvers': gs.getProperty("glide.workflow.renderer.mainflow.show_approver")
										};
	
		data.preferences = {'ui_accessibility' :
							gs.getPreference("glide.ui.accessibility", "false")};
	
    var ref = sc_req_item.stage;
		var refValue = ref.getValue();
		data.display_value = ref.getDisplayValue();
		if (sc_req_item.request.approval == 'requested') {
			data.process_started = false;
			data.display_value = gs.getMessage("Request Approval");
		} else {
			data.process_started = true;
			if (refValue == "request_approved") {
				if ((sc_req_item.context.nil() &amp;&amp; sc_req_item.flow_context.nil()) || (!sc_req_item.flow_context.nil() &amp;&amp; sc_req_item.flow_context.state == 'QUEUED'))
					data.display_value = gs.getMessage("Initiating");
				else if (refValue == ref.getDisplayValue())
					data.display_value = gs.getMessage("Request Approved");
			}
		}
	
    GlideController.putGlobal('sc_req_item', sc_req_item);
    sc_req_item.putCurrent();
    var renderer = RendererFactory.getRenderer(ref, sc_req_item.sys_id);
    var api = new SNC.RendererAPI(renderer);
    data.renderer = renderer + "";
    var worflow_id = sc_req_item.stage;
    var choiceList;
	var high_contrast = "";
	
	if(data.preferences.ui_accessibility == "true")
			high_contrast = "_high_contrast";
	
    if (renderer == 'Legacy' || renderer == "SCReqItemRenderer") {
				if (ref.getProviderType() == 'PFStagesProvider') {
					choiceList = ref.getStages();
				}
				else {
						var clGenerator = new GlideChoiceListGenerator('sc_req_item', 'stage');
						clGenerator.none = false;
						choiceList = clGenerator.get();
						api.internationalizeChoices(choiceList);
						var wfw;
						if (sc_req_item.stage.hasAttribute('icons') &amp;&amp; typeof (this[sc_req_item.stage.getAttribute('icons')]) == "function")
								wfw = new this[sc_req_item.stage.getAttribute('icons')]('sc_req_item.stage');
						else
								wfw = new WorkflowIcons('sc_req_item.stage');
						choiceList = wfw.process(choiceList);
						
				}
        var list = [];
        if (!JSUtil.nil(choiceList)) {
            for (var i = 0; i &lt; choiceList.size(); i++) {
                var choice = choiceList.get(i);
                if (!JSUtil.nil(choice.getValue())) {
                	   if (ref.getProviderType() == 'PFStagesProvider' &amp;&amp; choice.getParameter('visible') == false)
						continue;
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.title = choice.getParameter('title') || choice.getLabel();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    if (ref.getProviderType() == 'PFStagesProvider')
												temp.displayValue = temp.title + " (" + temp.state + ")";
										else
												temp.displayValue = temp.title + " (" + temp.label + ")";
                    temp.value = choice.getValue();
                    temp.id = choice.getId();
                    temp.selected = choice.getSelected();

                    var imgsrc = choice.image.split(' ');
                    imgsrc = imgsrc.length ? imgsrc[0] : imgsrc;
                    if (!imgsrc)
                        imgsrc = temp.selected ? 'icon-check-circle' : 'icon-empty-circle';
					
					imgsrc += high_contrast;
                    temp.image = imgsrc + '.png';
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
    } else if (renderer == "Linear" || renderer == "Main flow" || renderer == "Workflow-driven") {
        if (renderer == "Linear" || renderer == "Workflow-driven")
            choiceList = api.getAllWorkflowChoices(current, 'sc_req_item.stage');
        else
            choiceList = api.getParentWorkflowChoices(current, 'sc_req_item.stage');

				var showApprovers = false;
				if (renderer == "Linear")
					showApprovers = data.properties.linear_show_approvers == "true";
				else if (renderer == "Main flow")
					showApprovers = data.properties.main_flow_show_approvers == "true";
				else if (renderer == "Workflow-driven")
					showApprovers = data.properties.workflow_driven_show_approvers == "true";
			
        api.addIconsAndStatus(choiceList);
        var list = [];
        if (!JSUtil.nil(choiceList)) {
            for (var j = 0; j &lt; choiceList.size(); j++) {
                var choice = choiceList.get(j);
                var isVisible = true;
                if (renderer == "Linear" &amp;&amp; !api.getOption('showSkipped'))
                    if (choice.getParameter('state') + '' == 'skipped')
                        isVisible = false;

                if (renderer == "Main flow" || renderer == "Workflow-driven") {
                    var isWorkFlow = SNC.WorkflowStageRenderer.isWorkflow('sc_req_item.stage');
                    isVisible = (isWorkFlow == 'false') || ((choice.getParameter('visible') + '') == 'true');
                }
                if (choice.value == '')
                    isVisible = false;

                if (isVisible) {
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.value = choice.getValue();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    temp.id = choice.getId();
                    temp.selected = choice.getSelected();
										if (showApprovers) {
											var approvers = choice.getParameter('approvers');
											var approverArr = [];
											for(var i=0; i&lt;approvers.size(); i++) {
												var approver = approvers.get(i);
												approverArr.push(approver.get('label'));
											}
										}
										temp.approvers = approverArr;
                    temp.title = choice.getParameter('title') || choice.getLabel();
                    temp.displayValue = temp.title + " (" + temp.label + ")"
                    var imgsrc = choice.image.split(' ');
                    imgsrc = imgsrc.length ? imgsrc[0] : imgsrc;
                    if (!imgsrc)
                        imgsrc = temp.selected ? 'icon-check-circle' : 'icon-empty-circle';
					
					imgsrc += high_contrast;
                    temp.image = imgsrc + '.png';
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
    } else if (renderer == "SimpleProgressBar") {
        choiceList = api.getParentWorkflowChoices(current, 'sc_req_item.stage');
        var showValue = api.getOption('showValue') + '';
        var increment = 100.00 / choiceList.getSize();
        var percentComplete = 0;
        var atEnd = true;

        for (var i = 0; choiceList.getSize() &gt; i; i++) {
            percentComplete += increment;
            if (choiceList.getChoice(i).getParameter('state') + '' === 'active') {
                atEnd = false;
                break;
            }
        }
        data.increment = increment;

        percentComplete = atEnd ? 100 : parseInt(percentComplete);
        if (!JSUtil.nil(choiceList)) {
            var list = [];
            for (var j = 0; j &lt; choiceList.size(); j++) {
                var choice = choiceList.get(j);
                var isVisible = true;
                if (!api.getOption('showSkipped'))
                    if (choice.getParameter('state') + '' == 'skipped')
                        isVisible = false;

                if (choice.value == '')
                    isVisible = false;
                if (isVisible) {
                    var temp = {};
                    temp.label = choice.getLabel();
                    temp.value = choice.getValue();
                    temp.id = choice.getId();
										temp.state = choice.getParameter('state');
										temp.name = choice.getParameter('name');
                    temp.selected = choice.getSelected();
                    temp.title = choice.getParameter('title') || choice.getLabel();
                    var isVisible = true;
                    temp.isVisible = isVisible;
                    temp.displayValue = temp.label;

                    var imgsrc = 'progress_pctnotdone.gifx';
                    if (choice.getParameter('state') + '' != 'pending')
                        imgsrc = 'progress_pctdone.gifx';
                    temp.image = imgsrc;
                    list.push(temp);
                }
            }
        }
        data.choiceList = list;
				data.showValue = showValue;
			data.percentComplete = percentComplete;
    }
    data.current_stage_msg = gs.getMessage("Current stage: {0}", data.display_value); //We need this for WCAG
    data.approval_stages_msg = gs.getMessage("all stages "); //also for WCAG
    GlideController.removeGlobal('sc_req_item');
    sc_req_item.popCurrent();
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-01-28 21:20:38&lt;/sys_created_on&gt;&lt;sys_id&gt;3c58d7af972021106882b0efe153afcb&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;Copy of Request Item Workflow Stages&lt;/sys_name&gt;&lt;sys_package display_value="NeedIt" source="x_58872_needit"&gt;6ead8e780f603200cd674f8ce1050ed1&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="NeedIt"&gt;6ead8e780f603200cd674f8ce1050ed1&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_3c58d7af972021106882b0efe153afcb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-01-28 21:22:17&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div ng-if="data.error"&gt;
  &lt;h3&gt;
    {{::data.error}}
  &lt;/h3&gt;
&lt;/div&gt;
&lt;div ng-if="!data.error"&gt;
  &lt;div ng-include="'ritm_stage_icons_bar'" ng-if="data.renderer == 'Legacy' || data.renderer == 'SCReqItemRenderer' || data.renderer == 'Linear' || data.renderer == 'Main flow' || data.renderer == 'Workflow-driven'"&gt;
  &lt;/div&gt;
  &lt;div ng-if="data.renderer == 'SimpleProgressBar'" ng-include="'ritm_stage_progress_bar'"&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-711830837</payload_hash>
        <record_name>Copy of Request Item Workflow Stages</record_name>
        <reverted_from/>
        <source>70e87fb6976421106882b0efe153af14</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-28 21:22:17</sys_created_on>
        <sys_id>4db8176f972021106882b0efe153aff0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>185fa4275400000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-01-28 21:22:17</sys_updated_on>
        <type>Widget</type>
        <update_guid>45b8176ff1202110599cacb1c9c0e5f0</update_guid>
        <update_guid_history>45b8176ff1202110599cacb1c9c0e5f0:-711830837,81981fafdf20211058a081212d935e14:-1406443641,f5681baf62202110903de56907e62674:-711830837,b058d7afa32021100f850f72bd3f71cd:1008893474</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Copy of Request Item Workflow Stages">341917ef972021106882b0efe153af44</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-28 21:23:54</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>239ccdc096864b9d8cf90879d7b5e471</sys_id>
        <sys_metadata>3c58d7af972021106882b0efe153afcb</sys_metadata>
        <sys_name>Copy of Request Item Workflow Stages</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_scope_delete display_value="">94872a8897db403e8ee69a431de2fca4</sys_scope_delete>
        <sys_update_name>sp_widget_3c58d7af972021106882b0efe153afcb</sys_update_name>
        <sys_update_version display_value="sp_widget_3c58d7af972021106882b0efe153afcb">4db8176f972021106882b0efe153aff0</sys_update_version>
    </sys_metadata_delete>
</record_update>
